{"version":3,"sources":["logo.svg","pages/Dowloader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","enpoint","gradientBackgroundTypes","Downloader","state","link","result_url","post_title","thumbnail_url","loading","downloadImage","self","Object","assertThisInitialized","_this","setState","axios","post","post_url","then","response","data","isError","message","toast","error","_data$resp","resp","src_url","title","catch","console","log","warning","autoClose","saveFileFromUrl","url","fileName","replace","Math","random","toString","substring","toLocaleLowerCase","indexOf","method","responseType","window","URL","createObjectURL","Blob","document","createElement","href","setAttribute","body","appendChild","click","_this2","this","_this$state","cardClassName","concat","floor","react_default","a","className","placeholder","onChange","e","target","value","onClick","style","marginLeft","marginBottom","PacmanLoader_default","sizeUnit","size","color","react_toastify","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","backgroundImage","Component","App","Dowloader","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b4e383cd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Downloader.css\";\r\n\r\nconst enpoint = \"https://moneyfluapi.herokuapp.com/insta/image-urls\";\r\nconst gradientBackgroundTypes = [\r\n  \"normal\",\r\n  \"water\",\r\n  \"electric\",\r\n  \"fire\",\r\n  \"psychic\",\r\n  \"dark\",\r\n  \"grass\",\r\n  \"ice\",\r\n  \"fairy\"\r\n];\r\n\r\nclass Downloader extends Component {\r\n  state = {\r\n    link: \"\",\r\n    result_url: \"\",\r\n    post_title: \"\",\r\n    thumbnail_url: \"\",\r\n    loading: false\r\n  };\r\n\r\n  downloadImage = () => {\r\n    const self = this;\r\n    const { link } = this.state;\r\n\r\n    if (!link) {\r\n      toast.warning(\"Invalid post url!\", {\r\n        autoClose: 1000\r\n      });\r\n      return;\r\n    }\r\n\r\n    self.setState({ loading: true });\r\n\r\n    axios\r\n      .post(enpoint, {\r\n        post_url: link\r\n      })\r\n      .then(function(response) {\r\n        const { data } = response;\r\n\r\n        if (!data) {\r\n          toast.error(\"Failed!\");\r\n          self.setState({ loading: false });\r\n        } else {\r\n          const { isError, message } = data;\r\n\r\n          if (!isError) {\r\n            const {\r\n              resp: { src_url, title, thumbnail_url }\r\n            } = data;\r\n            toast(\"Yayyy, Get image successfully!\");\r\n\r\n            self.setState({\r\n              result_url: src_url,\r\n              post_title: title,\r\n              thumbnail_url: thumbnail_url,\r\n              loading: false\r\n            });\r\n          } else {\r\n            self.setState({ loading: false });\r\n            toast.error(message || \"Failed!\");\r\n          }\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        self.setState({ loading: false });\r\n        toast.error(\"Failed!\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  saveFileFromUrl = (url, title) => {\r\n    const tit = (\r\n      title.replace(/[^\\w\\s]/gi, \"\") ||\r\n      Math.random()\r\n        .toString(36)\r\n        .substring(2, 15) +\r\n        Math.random()\r\n          .toString(36)\r\n          .substring(2, 15)\r\n    )\r\n      .replace(/\\s+/g, \"_\")\r\n      .toLocaleLowerCase();\r\n\r\n    const fileName = tit + (url.indexOf(\".mp4\") > 0 ? \".mp4\" : \".jpg\");\r\n\r\n    axios({\r\n      url: url,\r\n      method: \"GET\",\r\n      responseType: \"blob\" // important\r\n    }).then(response => {\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      const link = document.createElement(\"a\");\r\n      link.href = url;\r\n      link.setAttribute(\"download\", fileName);\r\n      document.body.appendChild(link);\r\n      link.click();\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { link, result_url, post_title, thumbnail_url, loading } = this.state;\r\n    const cardClassName = `card card--${\r\n      gradientBackgroundTypes[Math.floor(Math.random() * 9)]\r\n    }`;\r\n    return (\r\n      <div className=\"downloader-container\">\r\n        <div className=\"intro\">\r\n          <div className=\"app-name\">Instagram downloader</div>\r\n          <div className=\"author\">By: Quang Son Nguyen</div>\r\n        </div>\r\n        <div className=\"link-panel\">\r\n          <div className=\"link-input\">\r\n            <label className=\"field a-field a-field_a3 page__field\">\r\n              <input\r\n                className=\"field__input a-field__input\"\r\n                placeholder=\"...\"\r\n                onChange={e => this.setState({ link: e.target.value })}\r\n                value={link}\r\n              />\r\n              <span className=\"a-field__label-wrap\">\r\n                <span className=\"a-field__label\">Link to instagram post</span>\r\n              </span>\r\n            </label>\r\n          </div>\r\n          <div className=\"download-buttons\">\r\n            {!loading && (\r\n              <button className=\"btt\" onClick={() => this.downloadImage()}>\r\n                Load Image\r\n              </button>\r\n            )}\r\n            {loading && (\r\n              <div style={{ marginLeft: \"-24px\", marginBottom: \"24px\" }}>\r\n                <PacmanLoader\r\n                  sizeUnit={\"px\"}\r\n                  size={24}\r\n                  color={\"#fa8072\"}\r\n                  loading={loading}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <ToastContainer\r\n          autoClose={1500}\r\n          position=\"top-center\"\r\n          hideProgressBar={false}\r\n          newestOnTop\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnVisibilityChange={false}\r\n          draggable\r\n          pauseOnHover={false}\r\n        />\r\n        {result_url && (\r\n          <div className={cardClassName}>\r\n            <div\r\n              className=\"card__image-container\"\r\n              style={{ backgroundImage: `url(${thumbnail_url})` }}\r\n            />\r\n            <div className=\"card__caption\">\r\n              <div>{post_title}</div>\r\n              <div className=\"card__type\">\r\n                <a\r\n                  onClick={() => this.saveFileFromUrl(result_url, post_title)}\r\n                  className=\"cir-btn\"\r\n                >\r\n                  Download\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Downloader;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Downloader from './pages/Dowloader';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Downloader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
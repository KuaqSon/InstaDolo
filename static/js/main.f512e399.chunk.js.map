{"version":3,"sources":["pages/Dowloader.jsx","App.js","serviceWorker.js","index.js"],"names":["gradientBackgroundTypes","Downloader","state","link","result_urls","post_title","loading","can_clear","downloadImage","self","Object","assertThisInitialized","_this","setState","axios","get","then","response","data","jsonObject","match","slice","results","JSON","parse","shortcode_media","entry_data","PostPage","graphql","edge_sidecar_to_children","display_resources","edge_media_to_caption","is_video","video_url","full_name","owner","srcs","push","thumbnail","pop","src","edges","map","x","_x$node","node","img_src","title","concat","text","length","toast","success","error","catch","console","log","warning","autoClose","saveFileFromUrl","url","fileName","replace","Math","random","toString","substring","toLocaleLowerCase","indexOf","method","responseType","window","URL","createObjectURL","Blob","document","createElement","href","setAttribute","body","appendChild","click","e","open","onUrlInputChange","post_url","target","value","clearUrlInput","_this2","this","_this$state","react_default","a","className","placeholder","onChange","onClick","style","marginLeft","marginBottom","PacmanLoader_default","sizeUnit","size","color","react_toastify","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","result","floor","maxWidth","key","backgroundImage","Component","App","Dowloader","Boolean","location","hostname","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f512e399.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Downloader.css\";\r\n\r\nconst gradientBackgroundTypes = [\r\n  \"normal\",\r\n  \"water\",\r\n  \"electric\",\r\n  \"fire\",\r\n  \"psychic\",\r\n  \"dark\",\r\n  \"grass\",\r\n  \"ice\",\r\n  \"fairy\"\r\n];\r\n\r\nclass Downloader extends Component {\r\n  state = {\r\n    link: \"\",\r\n    result_urls: [],\r\n    post_title: \"\",\r\n    loading: false,\r\n    can_clear: false\r\n  };\r\n\r\n  downloadImage = () => {\r\n    const self = this;\r\n    const { link } = this.state;\r\n\r\n    if (!link) {\r\n      toast.warning(\"Invalid post url!\", {\r\n        autoClose: 1000\r\n      });\r\n      return;\r\n    }\r\n\r\n    self.setState({ loading: true });\r\n\r\n    axios\r\n      .get(link)\r\n      .then(function(response) {\r\n        const { data } = response;\r\n\r\n        if (!data) {\r\n          toast.error(\"Failed!\");\r\n          self.setState({ loading: false });\r\n        } else {\r\n          const jsonObject = data\r\n            .match(\r\n              /<script type=\"text\\/javascript\">window\\._sharedData = (.*)<\\/script>/\r\n            )[1]\r\n            .slice(0, -1);\r\n\r\n          const results = JSON.parse(jsonObject);\r\n\r\n          if (results !== null) {\r\n            const {\r\n              entry_data: { PostPage }\r\n            } = results;\r\n\r\n            const {\r\n              graphql: { shortcode_media }\r\n            } = PostPage[0];\r\n\r\n            const {\r\n              edge_sidecar_to_children,\r\n              display_resources,\r\n              edge_media_to_caption,\r\n              is_video,\r\n              video_url,\r\n              owner: { full_name }\r\n            } = shortcode_media;\r\n\r\n            let srcs = [];\r\n\r\n            if (is_video) {\r\n              srcs.push({\r\n                thumbnail: display_resources.pop().src,\r\n                src: video_url\r\n              });\r\n            } else if (edge_sidecar_to_children) {\r\n              srcs = edge_sidecar_to_children.edges.map(x => {\r\n                const { display_resources, is_video, video_url } = x.node;\r\n\r\n                const img_src = display_resources.pop().src;\r\n\r\n                if (is_video) {\r\n                  return {\r\n                    thumbnail: img_src,\r\n                    src: video_url\r\n                  };\r\n                } else {\r\n                  return {\r\n                    thumbnail: img_src,\r\n                    src: img_src\r\n                  };\r\n                }\r\n              });\r\n            } else {\r\n              const src = display_resources.pop().src;\r\n              srcs.push({\r\n                thumbnail: src,\r\n                src: src\r\n              });\r\n            }\r\n\r\n            let title = `${full_name} on Instagram: ${edge_media_to_caption\r\n              .edges[0].node.text || \"\"}`;\r\n\r\n            if (title.length > 100) {\r\n              title = title.slice(0, 100);\r\n            }\r\n\r\n            toast.success(\"Yayyy, Get image successfully!\");\r\n            self.setState({\r\n              result_urls: srcs,\r\n              post_title: title,\r\n              loading: false\r\n            });\r\n          } else {\r\n            self.setState({ loading: false });\r\n            toast.error(\"Failed!\");\r\n          }\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        self.setState({ loading: false });\r\n        toast.error(\"Failed!\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  saveFileFromUrl = (url, title) => {\r\n    const tit = (\r\n      title.replace(/[^\\w\\s]/gi, \"\") ||\r\n      Math.random()\r\n        .toString(36)\r\n        .substring(2, 15) +\r\n        Math.random()\r\n          .toString(36)\r\n          .substring(2, 15)\r\n    )\r\n      .replace(/\\s+/g, \"_\")\r\n      .toLocaleLowerCase();\r\n\r\n    const fileName = tit + (url.indexOf(\".mp4\") > 0 ? \".mp4\" : \".jpg\");\r\n\r\n    try {\r\n      axios({\r\n        url: url,\r\n        method: \"GET\",\r\n        responseType: \"blob\" // important\r\n      }).then(response => {\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.setAttribute(\"download\", fileName);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      });\r\n    } catch (e) {\r\n      window.open(url, \"_blank\");\r\n    }\r\n  };\r\n\r\n  onUrlInputChange = e => {\r\n    const post_url = e.target.value;\r\n    this.setState({\r\n      link: post_url,\r\n      can_clear: post_url !== \"\"\r\n    });\r\n  };\r\n\r\n  clearUrlInput = () => {\r\n    this.setState({\r\n      link: \"\",\r\n      can_clear: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { link, result_urls, post_title, loading, can_clear } = this.state;\r\n    return (\r\n      <div>\r\n        <div className=\"downloader-container\">\r\n          <div className=\"intro\">\r\n            <div className=\"app-name\">Instagram downloader</div>\r\n            <div className=\"author\">By: Quang Son Nguyen</div>\r\n          </div>\r\n          <div className=\"link-panel\">\r\n            <div className=\"link-input\">\r\n              <label className=\"field a-field a-field_a3 page__field\">\r\n                <input\r\n                  className=\"field__input a-field__input\"\r\n                  placeholder=\"...\"\r\n                  onChange={e => this.onUrlInputChange(e)}\r\n                  value={link}\r\n                />\r\n                {can_clear && (\r\n                  <button\r\n                    className=\"btt-clear\"\r\n                    onClick={() => this.clearUrlInput()}\r\n                  >\r\n                    Clear\r\n                  </button>\r\n                )}\r\n                <span className=\"a-field__label-wrap\">\r\n                  <span className=\"a-field__label\">Link to instagram post</span>\r\n                </span>\r\n              </label>\r\n            </div>\r\n            <div className=\"download-buttons\">\r\n              {!loading && (\r\n                <button className=\"btt\" onClick={() => this.downloadImage()}>\r\n                  Load Image\r\n                </button>\r\n              )}\r\n              {loading && (\r\n                <div style={{ marginLeft: \"-24px\", marginBottom: \"24px\" }}>\r\n                  <PacmanLoader\r\n                    sizeUnit={\"px\"}\r\n                    size={24}\r\n                    color={\"#fa8072\"}\r\n                    loading={loading}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <ToastContainer\r\n            autoClose={2000}\r\n            position=\"top-center\"\r\n            hideProgressBar={false}\r\n            newestOnTop\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnVisibilityChange={false}\r\n            draggable\r\n            pauseOnHover={false}\r\n          />\r\n\r\n          {result_urls &&\r\n            result_urls.map(result => (\r\n              <div\r\n                className={`card card--${\r\n                  gradientBackgroundTypes[Math.floor(Math.random() * 9)]\r\n                }`}\r\n                style={{ maxWidth: \"480px\" }}\r\n                key={result_urls.indexOf(result)}\r\n              >\r\n                <div\r\n                  className=\"card__image-container\"\r\n                  style={{ backgroundImage: `url(${result.thumbnail})` }}\r\n                />\r\n                <div className=\"card__caption\">\r\n                  <div className=\"card__caption__text\">{post_title}</div>\r\n                  <div className=\"card__type\">\r\n                    <div\r\n                      onClick={() =>\r\n                        this.saveFileFromUrl(result.src, post_title)\r\n                      }\r\n                      className=\"cir-btn disable-select\"\r\n                    >\r\n                      Download\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Downloader;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Downloader from './pages/Dowloader';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Downloader />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
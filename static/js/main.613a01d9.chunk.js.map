{"version":3,"sources":["logo.svg","pages/Dowloader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","enpoint","gradientBackgroundTypes","Downloader","state","link","result_url","post_title","downloadImage","self","Object","assertThisInitialized","_this","axios","post","post_url","then","response","data","toast","error","isError","message","_data$resp","resp","src_url","title","setState","catch","console","log","warning","autoClose","_this2","this","_this$state","cardClassName","concat","Math","floor","random","react_default","a","createElement","className","placeholder","onChange","e","target","value","onClick","react_toastify","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","style","backgroundImage","href","Component","App","Dowloader","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.613a01d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Downloader.css\";\r\n\r\nconst enpoint = \"https://moneyfluapi.herokuapp.com/insta/image-urls\";\r\nconst gradientBackgroundTypes = [\r\n  \"normal\",\r\n  \"water\",\r\n  \"electric\",\r\n  \"fire\",\r\n  \"psychic\",\r\n  \"dark\",\r\n  \"grass\",\r\n  \"ice\",\r\n  \"fairy\"\r\n];\r\n\r\nclass Downloader extends Component {\r\n  state = {\r\n    link: \"\",\r\n    result_url: \"\",\r\n    post_title: \"\"\r\n  };\r\n\r\n  downloadImage = () => {\r\n    const self = this;\r\n    const { link } = this.state;\r\n\r\n    if (!link) {\r\n      toast.warning(\"Invalid post url!\", {\r\n        autoClose: 1000\r\n      });\r\n      return;\r\n    }\r\n\r\n    axios\r\n      .post(enpoint, {\r\n        post_url: link\r\n      })\r\n      .then(function(response) {\r\n        const { data } = response;\r\n\r\n        if (!data) {\r\n          toast.error(\"Failed!\");\r\n        }\r\n\r\n        const {\r\n          isError,\r\n          message,\r\n          resp: { src_url, title }\r\n        } = data;\r\n\r\n        if (!isError) {\r\n          toast(\"Yayyy, Get image successfully!\");\r\n\r\n          self.setState({\r\n            result_url: src_url,\r\n            post_title: title\r\n          });\r\n        } else {\r\n          toast.error(message || \"Failed!\");\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { link, result_url, post_title } = this.state;\r\n    const cardClassName = `card card--${\r\n      gradientBackgroundTypes[Math.floor(Math.random() * 9)]\r\n    }`;\r\n    console.log(\"result_url\", result_url);\r\n    return (\r\n      <div className=\"downloader-container\">\r\n        <div className=\"intro\">\r\n          <div className=\"app-name\">Instagram downloader</div>\r\n          <div className=\"author\">By: Quang Son Nguyen</div>\r\n        </div>\r\n        <div className=\"link-panel\">\r\n          <div className=\"link-input\">\r\n            <label className=\"field a-field a-field_a3 page__field\">\r\n              <input\r\n                className=\"field__input a-field__input\"\r\n                placeholder=\"...\"\r\n                onChange={e => this.setState({ link: e.target.value })}\r\n                value={link}\r\n              />\r\n              <span className=\"a-field__label-wrap\">\r\n                <span className=\"a-field__label\">Link to instagram post</span>\r\n              </span>\r\n            </label>\r\n          </div>\r\n          <div className=\"download-buttons\">\r\n            <button className=\"btt\" onClick={() => this.downloadImage()}>\r\n              Load Image\r\n            </button>\r\n          </div>\r\n        </div>\r\n        <ToastContainer\r\n            autoClose={1500}\r\n            position=\"top-center\"\r\n            hideProgressBar={false}\r\n            newestOnTop\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnVisibilityChange={false}\r\n            draggable\r\n            pauseOnHover={false}\r\n          />\r\n        {result_url && (\r\n          // <div\r\n          //   className=\"image-panel\"\r\n          //   style={{ backgroundImage: `url(${result_url})` }}\r\n          // />\r\n\r\n          <div className={cardClassName}>\r\n            <div\r\n              className=\"card__image-container\"\r\n              style={{ backgroundImage: `url(${result_url})` }}\r\n            />\r\n            <div className=\"card__caption\">\r\n              <div>{post_title}</div>\r\n              <div className=\"card__type\">\r\n                <a href={result_url} target=\"_blank\" className=\"cir-btn\">\r\n                  Download\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Downloader;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Downloader from './pages/Dowloader';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Downloader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
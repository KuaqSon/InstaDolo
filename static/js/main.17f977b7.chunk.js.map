{"version":3,"sources":["logo.svg","pages/Dowloader.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","enpoint","gradientBackgroundTypes","Downloader","state","link","result_url","post_title","thumbnail_url","loading","downloadImage","self","Object","assertThisInitialized","_this","setState","axios","post","post_url","then","response","data","isError","message","toast","error","_data$resp","resp","src_url","title","catch","console","log","warning","autoClose","_this2","this","_this$state","cardClassName","concat","Math","floor","random","react_default","a","createElement","className","placeholder","onChange","e","target","value","onClick","style","marginLeft","marginBottom","PacmanLoader_default","sizeUnit","size","color","react_toastify","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","backgroundImage","href","Component","App","Dowloader","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.17f977b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Downloader.css\";\r\n\r\nconst enpoint = \"https://moneyfluapi.herokuapp.com/insta/image-urls\";\r\nconst gradientBackgroundTypes = [\r\n  \"normal\",\r\n  \"water\",\r\n  \"electric\",\r\n  \"fire\",\r\n  \"psychic\",\r\n  \"dark\",\r\n  \"grass\",\r\n  \"ice\",\r\n  \"fairy\"\r\n];\r\n\r\nclass Downloader extends Component {\r\n  state = {\r\n    link: \"\",\r\n    result_url: \"\",\r\n    post_title: \"\",\r\n    thumbnail_url: \"\",\r\n    loading: false\r\n  };\r\n\r\n  downloadImage = () => {\r\n    const self = this;\r\n    const { link } = this.state;\r\n\r\n    if (!link) {\r\n      toast.warning(\"Invalid post url!\", {\r\n        autoClose: 1000\r\n      });\r\n      return;\r\n    }\r\n\r\n    self.setState({ loading: true });\r\n\r\n    axios\r\n      .post(enpoint, {\r\n        post_url: link\r\n      })\r\n      .then(function(response) {\r\n        const { data } = response;\r\n\r\n        if (!data) {\r\n          toast.error(\"Failed!\");\r\n          self.setState({ loading: false });\r\n        } else {\r\n          const { isError, message } = data;\r\n\r\n          if (!isError) {\r\n            const {\r\n              resp: { src_url, title, thumbnail_url }\r\n            } = data;\r\n            toast(\"Yayyy, Get image successfully!\");\r\n\r\n            self.setState({\r\n              result_url: src_url,\r\n              post_title: title,\r\n              thumbnail_url: thumbnail_url,\r\n              loading: false\r\n            });\r\n          } else {\r\n            self.setState({ loading: false });\r\n            toast.error(message || \"Failed!\");\r\n          }\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        self.setState({ loading: false });\r\n        toast.error(\"Failed!\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    const { link, result_url, post_title, thumbnail_url, loading } = this.state;\r\n    const cardClassName = `card card--${\r\n      gradientBackgroundTypes[Math.floor(Math.random() * 9)]\r\n    }`;\r\n    return (\r\n      <div className=\"downloader-container\">\r\n        <div className=\"intro\">\r\n          <div className=\"app-name\">Instagram downloader</div>\r\n          <div className=\"author\">By: Quang Son Nguyen</div>\r\n        </div>\r\n        <div className=\"link-panel\">\r\n          <div className=\"link-input\">\r\n            <label className=\"field a-field a-field_a3 page__field\">\r\n              <input\r\n                className=\"field__input a-field__input\"\r\n                placeholder=\"...\"\r\n                onChange={e => this.setState({ link: e.target.value })}\r\n                value={link}\r\n              />\r\n              <span className=\"a-field__label-wrap\">\r\n                <span className=\"a-field__label\">Link to instagram post</span>\r\n              </span>\r\n            </label>\r\n          </div>\r\n          <div className=\"download-buttons\">\r\n            {!loading && (\r\n              <button className=\"btt\" onClick={() => this.downloadImage()}>\r\n                Load Image\r\n              </button>\r\n            )}\r\n            {loading && (\r\n              <div style={{ marginLeft: \"-24px\", marginBottom: \"24px\" }}>\r\n                <PacmanLoader\r\n                  sizeUnit={\"px\"}\r\n                  size={24}\r\n                  color={\"#fa8072\"}\r\n                  loading={loading}\r\n                />\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <ToastContainer\r\n          autoClose={1500}\r\n          position=\"top-center\"\r\n          hideProgressBar={false}\r\n          newestOnTop\r\n          closeOnClick\r\n          rtl={false}\r\n          pauseOnVisibilityChange={false}\r\n          draggable\r\n          pauseOnHover={false}\r\n        />\r\n        {result_url && (\r\n          <div className={cardClassName}>\r\n            <div\r\n              className=\"card__image-container\"\r\n              style={{ backgroundImage: `url(${thumbnail_url})` }}\r\n            />\r\n            <div className=\"card__caption\">\r\n              <div>{post_title}</div>\r\n              <div className=\"card__type\">\r\n                <a href={result_url} target=\"_blank\" className=\"cir-btn\">\r\n                  Download\r\n                </a>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Downloader;\r\n","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Downloader from './pages/Dowloader';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Downloader />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}
{"version":3,"sources":["pages/Dowloader.jsx","App.js","serviceWorker.js","index.js"],"names":["enpoint","gradientBackgroundTypes","Downloader","state","link","result_urls","post_title","loading","downloadImage","self","Object","assertThisInitialized","_this","setState","axios","get","params","post_url","then","response","data","isError","message","toast","error","_data$resp","resp","srcs","title","success","catch","console","log","warning","autoClose","saveFileFromUrl","url","fileName","replace","Math","random","toString","substring","toLocaleLowerCase","indexOf","method","responseType","window","URL","createObjectURL","Blob","document","createElement","href","setAttribute","body","appendChild","click","e","open","_this2","this","_this$state","react_default","a","className","placeholder","onChange","target","value","onClick","style","marginLeft","marginBottom","PacmanLoader_default","sizeUnit","size","color","react_toastify","position","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnVisibilityChange","draggable","pauseOnHover","map","concat","floor","maxWidth","key","backgroundImage","Component","App","Dowloader","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7672220.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport { ToastContainer, toast } from \"react-toastify\";\r\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./Downloader.css\";\r\n\r\nconst enpoint = \"https://moneyfluapi.herokuapp.com/insta/image-urls-v3\";\r\nconst gradientBackgroundTypes = [\r\n  \"normal\",\r\n  \"water\",\r\n  \"electric\",\r\n  \"fire\",\r\n  \"psychic\",\r\n  \"dark\",\r\n  \"grass\",\r\n  \"ice\",\r\n  \"fairy\"\r\n];\r\n\r\nclass Downloader extends Component {\r\n  state = {\r\n    link: \"\",\r\n    result_urls: [],\r\n    post_title: \"\",\r\n    loading: false\r\n  };\r\n\r\n  downloadImage = () => {\r\n    const self = this;\r\n    const { link } = this.state;\r\n\r\n    if (!link) {\r\n      toast.warning(\"Invalid post url!\", {\r\n        autoClose: 1000\r\n      });\r\n      return;\r\n    }\r\n\r\n    self.setState({ loading: true });\r\n\r\n    axios\r\n      .get(enpoint, {\r\n        params: {\r\n          post_url: link\r\n        }\r\n      })\r\n      .then(function(response) {\r\n        const { data } = response;\r\n\r\n        if (!data) {\r\n          toast.error(\"Failed!\");\r\n          self.setState({ loading: false });\r\n        } else {\r\n          const { isError, message } = data;\r\n\r\n          if (!isError) {\r\n            const {\r\n              resp: { srcs, title }\r\n            } = data;\r\n            toast.success(\"Yayyy, Get image successfully!\");\r\n\r\n            self.setState({\r\n              result_urls: srcs,\r\n              post_title: title,\r\n              loading: false\r\n            });\r\n          } else {\r\n            self.setState({ loading: false });\r\n            toast.error(message || \"Failed!\");\r\n          }\r\n        }\r\n      })\r\n      .catch(function(error) {\r\n        self.setState({ loading: false });\r\n        toast.error(\"Failed!\");\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  saveFileFromUrl = (url, title) => {\r\n    const tit = (\r\n      title.replace(/[^\\w\\s]/gi, \"\") ||\r\n      Math.random()\r\n        .toString(36)\r\n        .substring(2, 15) +\r\n        Math.random()\r\n          .toString(36)\r\n          .substring(2, 15)\r\n    )\r\n      .replace(/\\s+/g, \"_\")\r\n      .toLocaleLowerCase();\r\n\r\n    const fileName = tit + (url.indexOf(\".mp4\") > 0 ? \".mp4\" : \".jpg\");\r\n\r\n    try {\r\n      axios({\r\n        url: url,\r\n        method: \"GET\",\r\n        responseType: \"blob\" // important\r\n      }).then(response => {\r\n        const url = window.URL.createObjectURL(new Blob([response.data]));\r\n        const link = document.createElement(\"a\");\r\n        link.href = url;\r\n        link.setAttribute(\"download\", fileName);\r\n        document.body.appendChild(link);\r\n        link.click();\r\n      });\r\n    } catch (e) {\r\n      window.open(url, \"_blank\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { link, result_urls, post_title, loading } = this.state;\r\n    // const cardClassName = `card card--${\r\n    //   gradientBackgroundTypes[Math.floor(Math.random() * 9)]\r\n    // }`;\r\n    return (\r\n      <div>\r\n        <div className=\"downloader-container\">\r\n          <div className=\"intro\">\r\n            <div className=\"app-name\">Instagram downloader</div>\r\n            <div className=\"author\">By: Quang Son Nguyen</div>\r\n          </div>\r\n          <div className=\"link-panel\">\r\n            <div className=\"link-input\">\r\n              <label className=\"field a-field a-field_a3 page__field\">\r\n                <input\r\n                  className=\"field__input a-field__input\"\r\n                  placeholder=\"...\"\r\n                  onChange={e => this.setState({ link: e.target.value })}\r\n                  value={link}\r\n                />\r\n                <span className=\"a-field__label-wrap\">\r\n                  <span className=\"a-field__label\">Link to instagram post</span>\r\n                </span>\r\n              </label>\r\n            </div>\r\n            <div className=\"download-buttons\">\r\n              {!loading && (\r\n                <button className=\"btt\" onClick={() => this.downloadImage()}>\r\n                  Load Image\r\n                </button>\r\n              )}\r\n              {loading && (\r\n                <div style={{ marginLeft: \"-24px\", marginBottom: \"24px\" }}>\r\n                  <PacmanLoader\r\n                    sizeUnit={\"px\"}\r\n                    size={24}\r\n                    color={\"#fa8072\"}\r\n                    loading={loading}\r\n                  />\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n          <ToastContainer\r\n            autoClose={2000}\r\n            position=\"top-center\"\r\n            hideProgressBar={false}\r\n            newestOnTop\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnVisibilityChange={false}\r\n            draggable\r\n            pauseOnHover={false}\r\n          />\r\n\r\n          {result_urls &&\r\n            result_urls.map(url => (\r\n              <div\r\n                className={`card card--${\r\n                  gradientBackgroundTypes[Math.floor(Math.random() * 9)]\r\n                }`}\r\n                style={{ maxWidth: \"480px\" }}\r\n                key={result_urls.indexOf(url)}\r\n              >\r\n                <div\r\n                  className=\"card__image-container\"\r\n                  style={{ backgroundImage: `url(${url})` }}\r\n                />\r\n                <div className=\"card__caption\">\r\n                  <div>{post_title}</div>\r\n                  <div className=\"card__type\">\r\n                    <div\r\n                      onClick={() => this.saveFileFromUrl(url, post_title)}\r\n                      className=\"cir-btn disable-select\"\r\n                    >\r\n                      Download\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Downloader;\r\n","import React from 'react';\nimport './App.css';\nimport Downloader from './pages/Dowloader';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Downloader />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}